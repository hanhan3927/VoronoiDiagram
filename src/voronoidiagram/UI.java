/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package voronoidiagram;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.awt.Point;
import java.awt.Polygon;
import java.awt.geom.Point2D;
import java.awt.geom.Line2D;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import java.util.Collections; 
import java.util.Comparator;
import static voronoidiagram.Var.File_Point_Set;
/**
 *
 * @author shiechenghan
 */



public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    
    public UI() {
        initComponents();        
        g2d = (Graphics2D)jPanel1.getGraphics(); 
        super.paintComponents(g2d);
        super.setAlwaysOnTop(false);
        jButton5.setBackground(Var.Point_Color);
        jButton6.setBackground(Var.VD_Line_Color1 );
        jButton13.setBackground(Var.VD_Line_Color2);
        jButton14.setBackground(Var.CH_Line_Color1 );
        jButton15.setBackground(Var.CH_Line_Color2 );
        jButton16.setBackground(Var.HP_Line_Color1);
        jButton17.setBackground(Var.HP_Line_Color2 );
    }    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VoronoiDiagram");
        setAlwaysOnTop(true);
        setLocation(new java.awt.Point(100, 100));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        jLabel1.setText("1");

        jButton2.setText("Random Point");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Clear All");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jTextField1.setToolTipText("input number of random points");

        jList1.setModel(Var.Point_DLM);
        jScrollPane1.setViewportView(jList1);

        jLabel7.setText("========================Setting=====================");

        jLabel8.setText("=====================Generate Point==================");

        jButton4.setText("Remove Select Point");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 0, 0));
        jButton5.setText("Point Color");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setText("VD Line Color 1");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Run");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Step by Step");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel9.setText("=======================Point List====================");

        jButton9.setText("Reset");

        jLabel10.setText("=======================Execute======================");

        jButton1.setText("Read From File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton10.setText("Next Data");
        jButton10.setEnabled(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel3.setText("file name");

        jLabel2.setText("File Name:");

        jButton11.setText("Last Data");
        jButton11.setEnabled(false);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel4.setText("Number of Data:");

        jLabel5.setText("0/0");

        jButton12.setText("Out the result");
        jButton12.setActionCommand("");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(0, 0, 0));
        jButton13.setText("VD Line Color 2");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(0, 0, 0));
        jButton14.setText("CH Line Color 1");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(0, 0, 0));
        jButton15.setText("CH Line Color 2");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(0, 0, 0));
        jButton16.setText("HP Line Color");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setBackground(new java.awt.Color(0, 0, 0));
        jButton17.setText("HP Line Color 2");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel5))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(jLabel2)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField1)))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton14)
                            .addComponent(jButton15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton16)
                            .addComponent(jButton17))
                        .addGap(3, 3, 3)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton10)
                            .addComponent(jButton11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(11, 11, 11)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jButton8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton9)
                            .addComponent(jButton12)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton3.getAccessibleContext().setAccessibleName("Clear All Point");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        // TODO add your handling code here:
        jLabel1.setText("("+evt.getX()+" , "+evt.getY()+")");
        
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        addPoint(new Point(evt.getX(),evt.getY()));        
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        int tmp = 0;
        try{
            tmp = Integer.parseInt(jTextField1.getText());
        }catch(Exception e){
            return;
        }
        DrawRandomPoint(tmp);
        return ;
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:       
        ClearPanel();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MousePressed
        // TODO add your handling code here:
        java.util.List<String> SL = jList1.getSelectedValuesList();
        for (int i=0;i<SL.size();i++){
            removePoint(SL.get(i));
        }
        
    }//GEN-LAST:event_jButton4MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fd = new JFileChooser();
        fd.showOpenDialog(null);
	File f = fd.getSelectedFile();
        String f_name = f.getName();
        jLabel3.setText(f_name);
        jButton10.setEnabled(false);
        jButton11.setEnabled(false);
        String f_name_extention = f_name.substring((f_name.lastIndexOf(46)+1),(f_name.length()));
	if(f!= null && (f_name_extention.equals("in") || f_name_extention.equals("txt"))){
            ClearPanel();
            ReadFromFile(f);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Var.Point_Color = JColorChooser.showDialog(null,"ChooseColor" ,Var.Point_Color);
        jButton5.setBackground(Var.Point_Color);
        UpdatePanel();
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Var.VD_Line_Color1 = JColorChooser.showDialog(null,"ChooseColor" ,Var.VD_Line_Color1);
        jButton6.setBackground(Var.VD_Line_Color1 );
        UpdatePanel();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        if(Var.isFinish == false){

            Var.Line_in_Canvas.clear();
            Var.Line_in_Canvas2.clear();
            Var.Dive_Line_in_Canvas.clear();
            Var.Convex_Hull_Line_in_Canvas.clear();
            Var.Convex_Hull_Line_in_Canvas2.clear();
            Var.Hyper_Plane_in_Canvas.clear();
            Var.Hyper_Plane_in_Canvas2.clear();
            
            VoronoiDiagram.VD2(Var.Point_in_Canvas,Var.VD_Line_Set,Var.CH_Line_Set,Var.HP_Line_Set);
            Var.isFinish = true;
            Var.count_VD = Var.VD_Line_Set.size()/2;
            
        }else{
            if(Var.count_VD<0) return;
            Var.Line_in_Canvas.clear();
            Var.Dive_Line_in_Canvas.clear();
            Var.Convex_Hull_Line_in_Canvas.clear();
            Var.Hyper_Plane_in_Canvas.clear();
            
            if(Var.count_VD==0){
                for (int i=0;i<Var.VD_Line_Set.get(Var.VD_Line_Set.size()-1).size();i++){
                    Var.Line_in_Canvas.add(Var.VD_Line_Set.get(Var.VD_Line_Set.size()-1).get(i));
                }
                for (int i=0;i<Var.CH_Line_Set.get(Var.CH_Line_Set.size()-1).size()-1;i++){
                    Var.Convex_Hull_Line_in_Canvas.add(new Var.Line(Var.CH_Line_Set.get(Var.CH_Line_Set.size()-1).get(i),Var.CH_Line_Set.get(Var.CH_Line_Set.size()-1).get(i+1)));
                }
                Var.Convex_Hull_Line_in_Canvas.add(new Var.Line(Var.CH_Line_Set.get(Var.CH_Line_Set.size()-1).get(Var.CH_Line_Set.get(Var.CH_Line_Set.size()-1).size()-1),Var.CH_Line_Set.get(Var.CH_Line_Set.size()-1).get(0)));
                
                if(Var.HP_Line_Set.size()>0 && Var.HP_Line_Set.get(Var.HP_Line_Set.size()-1).size()>0){
                    for (int i=0;i<Var.HP_Line_Set.get(Var.HP_Line_Set.size()-1).size();i++){
                        Var.Hyper_Plane_in_Canvas.add(Var.HP_Line_Set.get(Var.HP_Line_Set.size()-1).get(i));
                    }
                }
            }else if(Var.count_VD >0){
                
                // n*2 and n*2+1
                
                
                int n = (Var.VD_Line_Set.size()/2) - Var.count_VD;
                
                if(Var.VD_Line_Set.size()>0 && Var.VD_Line_Set.get(n*2).size()>0){
                    for (int i=0;i<Var.VD_Line_Set.get(n*2).size();i++){
                        Var.Line_in_Canvas.add(Var.VD_Line_Set.get(n*2).get(i));
                    }
                }
                if(Var.VD_Line_Set.size()>0 && Var.VD_Line_Set.get(n*2+1).size()>0){
                    for (int i=0;i<Var.VD_Line_Set.get(n*2+1).size();i++){
                        Var.Line_in_Canvas2.add(Var.VD_Line_Set.get(n*2+1).get(i));
                    }
                }
                
                //================================================================
                if(Var.CH_Line_Set.size()>0 && Var.CH_Line_Set.get(n*2).size()>0){
                    for (int i=0;i<Var.CH_Line_Set.get(n*2).size()-1;i++){
                        Var.Convex_Hull_Line_in_Canvas.add(new Var.Line(Var.CH_Line_Set.get(n*2).get(i),Var.CH_Line_Set.get(n*2).get(i+1)));
                    }
                    Var.Convex_Hull_Line_in_Canvas.add(new Var.Line(Var.CH_Line_Set.get(n*2).get(Var.CH_Line_Set.get(n*2).size()-1),Var.CH_Line_Set.get(n*2).get(0)));

                }
                if(Var.CH_Line_Set.size()>0 && Var.CH_Line_Set.get(n*2+1).size()>0){
                    for (int i=0;i<Var.CH_Line_Set.get(n*2+1).size()-1;i++){
                        Var.Convex_Hull_Line_in_Canvas2.add(new Var.Line(Var.CH_Line_Set.get(n*2+1).get(i),Var.CH_Line_Set.get(n*2+1).get(i+1)));
                    }
                    Var.Convex_Hull_Line_in_Canvas2.add(new Var.Line(Var.CH_Line_Set.get(n*2+1).get(Var.CH_Line_Set.get(n*2+1).size()-1),Var.CH_Line_Set.get(n*2+1).get(0)));
                }
                
                //================================================================
                if(Var.HP_Line_Set.size()>0 && Var.HP_Line_Set.get(n*2).size()>0){
                    for (int i=0;i<Var.HP_Line_Set.get(n*2).size();i++){
                        Var.Hyper_Plane_in_Canvas.add(Var.HP_Line_Set.get(n*2).get(i));
                    }
                }
                if(Var.HP_Line_Set.size()>0 && Var.HP_Line_Set.get(n*2+1).size()>0){
                    for (int i=0;i<Var.HP_Line_Set.get(n*2+1).size();i++){
                        Var.Hyper_Plane_in_Canvas2.add(Var.HP_Line_Set.get(n*2+1).get(i));
                    }
                }
                
                Var.count_VD -=1;
                
            }
            
        }
        UpdatePanel();
        
        
        
        
        
       
        
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        ClearPanel();
        Var.number_of_data += 1;
        jLabel5.setText(Var.number_of_data+"/"+Var.data_size);        
        jButton11.setEnabled(true);
        if(Var.number_of_data == Var.data_size){
            jButton10.setEnabled(false);            
        }
        if(Var.File_Point_Set.size()>0)
            addPoint(Var.File_Point_Set.get(Var.number_of_data-1));
        if(Var.File_Line_Set.size()>0) 
            addLine(Var.File_Line_Set.get(Var.number_of_data-1));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        ClearPanel();
        Var.number_of_data -= 1;
        jLabel5.setText(Var.number_of_data+"/"+Var.data_size);   
        jButton10.setEnabled(true);
        if(Var.number_of_data == 1) jButton11.setEnabled(false);
        if(Var.File_Point_Set.size()>0) 
            addPoint(Var.File_Point_Set.get(Var.number_of_data-1));
        if(Var.File_Line_Set.size()>0) 
            addLine(Var.File_Line_Set.get(Var.number_of_data-1));
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.setApproveButtonText("Save");
        jFileChooser.showOpenDialog(null);        
        String path = jFileChooser.getSelectedFile().getAbsolutePath();
        if(path==null) return;
        try {
            OutputFile((path+"/output.txt"));
        } catch (IOException ex) {            
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        //execute
        //VD2(ArrayList<Point> vd_p,ArrayList<Line>vd_l,ArrayList<Line> vd_hp,ArrayList<Point> ch_l)
        VoronoiDiagram.VD2(Var.Point_in_Canvas,Var.VD_Line_Set,Var.CH_Line_Set,Var.HP_Line_Set);
        
        Var.Line_in_Canvas.clear();
        Var.Line_in_Canvas2.clear();
        Var.Dive_Line_in_Canvas.clear();
        Var.Convex_Hull_Line_in_Canvas.clear();
        Var.Convex_Hull_Line_in_Canvas2.clear();
        Var.Hyper_Plane_in_Canvas.clear();
        Var.Hyper_Plane_in_Canvas2.clear();
        
        for (int i=0;i<Var.VD_Line_Set.get(Var.VD_Line_Set.size()-1).size();i++){
            Var.Line_in_Canvas.add(Var.VD_Line_Set.get(Var.VD_Line_Set.size()-1).get(i));
        }
        for (int i=0;i<Var.CH_Line_Set.get(Var.VD_Line_Set.size()-1).size()-1;i++){
            Var.Convex_Hull_Line_in_Canvas.add(new Var.Line(Var.CH_Line_Set.get(Var.VD_Line_Set.size()-1).get(i),Var.CH_Line_Set.get(Var.VD_Line_Set.size()-1).get(i+1)));
        }
        Var.Convex_Hull_Line_in_Canvas.add(new Var.Line(Var.CH_Line_Set.get(Var.VD_Line_Set.size()-1).get(Var.CH_Line_Set.get(Var.VD_Line_Set.size()-1).size()-1),Var.CH_Line_Set.get(Var.VD_Line_Set.size()-1).get(0)));
        if(Var.HP_Line_Set.size()>0 && Var.HP_Line_Set.get(Var.HP_Line_Set.size()-1).size()>0){
            for (int i=0;i<Var.HP_Line_Set.get(Var.HP_Line_Set.size()-1).size();i++){
                Var.Hyper_Plane_in_Canvas.add(Var.HP_Line_Set.get(Var.HP_Line_Set.size()-1).get(i));
            }
        }
        
        UpdatePanel();
        
        
    }//GEN-LAST:event_jButton7ActionPerformed
   
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        Var.VD_Line_Color2 = JColorChooser.showDialog(null,"ChooseColor" ,Var.VD_Line_Color2);
        jButton13.setBackground(Var.VD_Line_Color2);
        UpdatePanel();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        Var.CH_Line_Color1 = JColorChooser.showDialog(null,"ChooseColor" ,Var.CH_Line_Color1 );
        jButton14.setBackground(Var.CH_Line_Color1 );
        UpdatePanel();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        Var.CH_Line_Color2 = JColorChooser.showDialog(null,"ChooseColor" ,Var.CH_Line_Color2 );
        jButton15.setBackground(Var.CH_Line_Color2 );
        UpdatePanel();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        Var.HP_Line_Color1 = JColorChooser.showDialog(null,"ChooseColor" ,Var.HP_Line_Color1 );
        jButton16.setBackground(Var.HP_Line_Color1);
        UpdatePanel();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        Var.HP_Line_Color2 = JColorChooser.showDialog(null,"ChooseColor" ,Var.HP_Line_Color2 );
        jButton17.setBackground(Var.HP_Line_Color2 );
        UpdatePanel();
    }//GEN-LAST:event_jButton17ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    private Graphics2D g2d ;
    
    
    
    
    // Read File
    
    void ReadFromFile(File file){
        ClearPanel();
        Var.File_Point_Set.clear();
        Var.File_Line_Set.clear();
        ArrayList<Point> temp_Point_Array = new  ArrayList<Point>();
        ArrayList<Var.Line> temp_Line_Array = new  ArrayList<Var.Line>();
        Var.ReadFileSuccess = false;
        Var.data_size = 0;
        Var.number_of_data = 1;
        Var.isShowVornoiFromFile=false;
        try {
            Var.File_Point_Set.clear();
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String tmp;
            String[] atmp = new String[3];
            int count = 0;
            try {
                while((tmp = br.readLine())!=null){                    
                    if(tmp.length()==0){continue;}
                    if(tmp.charAt(0)!='#'){            //it is not a comment
                        if(tmp.charAt(0)=='P' || tmp.charAt(0)=='E') Var.isShowVornoiFromFile=true; 
                        
                        if(Var.isShowVornoiFromFile   == false){       //type of read data                       
                            if(count==0){                  
                                count = Integer.parseInt(tmp);
                                if(count==0){              //end of data
                                    break;
                                }
                            }
                            else{                          //read data of point
                                atmp = tmp.split(" ");                                
                                temp_Point_Array.add(new Point(Integer.parseInt(atmp[0]),Integer.parseInt(atmp[1])));
                                count-=1;
                            }
                            if(count==0){
                                Var.File_Point_Set.add(new ArrayList<Point>(temp_Point_Array));                                
                                temp_Point_Array.clear();
                                Var.data_size+=1;
                            }
                        }
                        
                        else{                            
                            atmp = tmp.split(" ");
                            if(atmp[0].charAt(0)=='P')
                                temp_Point_Array.add(new Point(Integer.parseInt(atmp[1]),Integer.parseInt(atmp[2])));
                            else
                                temp_Line_Array.add(new Var.Line(new Point(Integer.parseInt(atmp[1]),Integer.parseInt(atmp[2])),new Point(Integer.parseInt(atmp[3]),Integer.parseInt(atmp[4]))));
                        }
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }        
        if(Var.isShowVornoiFromFile == true){
            Var.File_Point_Set.add(temp_Point_Array);
            Var.File_Line_Set.add(temp_Line_Array);
            Var.data_size = 1;
        }
        Var.ReadFileSuccess = true;
        jLabel5.setText(Var.number_of_data+"/"+Var.data_size);
        if(Var.data_size > 1)jButton10.setEnabled(true);

        if(Var.File_Point_Set.size()>0){
            addPoint(Var.File_Point_Set.get(0));
        }
        if(Var.File_Line_Set.size()>0)addLine(Var.File_Line_Set.get(0));
        
    }
   
    
    void OutputFile(String file_name) throws IOException{
        Var.OutputFileSuccess = false;              
        BufferedWriter bw = new BufferedWriter(new FileWriter(file_name));
        Var.SortPoint(Var.Point_in_Canvas);
        Var.SortLine(Var.Line_in_Canvas);
        
        if(Var.Point_in_Canvas.size()>0)
        {          
            for (int i=0 ;i<Var.Point_in_Canvas.size();i++)
            {
                bw.write("P "+Var.Point_in_Canvas.get(i).x+" "+Var.Point_in_Canvas.get(i).y+"\r\n");
            }
        }
        
        if(Var.Line_in_Canvas.size()>0)
        {         
            for (int i=0 ;i<Var.Line_in_Canvas.size();i++)
            {
                bw.write("E "+Var.Line_in_Canvas.get(i).p1.x+" "+Var.Line_in_Canvas.get(i).p1.y+" "+Var.Line_in_Canvas.get(i).p2.x+" "+Var.Line_in_Canvas.get(i).p2.y+"\r\n");
            }
        }
        bw.close();
        return;
        
        
    }
    
    ArrayList<Point> LexicalOrder_p(ArrayList<Point> a_P){
        ArrayList<Point>  a_P_copy = new ArrayList(a_P);
        Collections.sort(a_P_copy, new Comparator<Point>() {
            @Override
            public int compare(Point o1, Point o2) {
              return Var.ComparePoint(o1,o2);
            }
        });
        return a_P_copy;
    }
    ArrayList<Var.Line> LexicalOrder_l(ArrayList<Var.Line> a_L){
        ArrayList<Var.Line>  a_L_copy = new ArrayList(a_L);        
        Collections.sort(a_L_copy, new Comparator<Var.Line>() {
            @Override
            public int compare(Var.Line l1, Var.Line l2) {
              return Var.CompareLine(l1,l2);
            }
        });
        return a_L_copy;
    }
    Color getRandomColor(){
        return new Color((int)Math.random()*1000%256,(int)Math.random()*1000%256,(int)Math.random()*1000%256);   
    }
    
    void addPoint(Point p){
        if(Var.point_status[p.x][p.y] == true) return;
        Var.point_status[p.x][p.y] = true;
        Var.Point_in_Canvas.add(p); 
        Var.Point_DLM.addElement("("+p.x+","+p.y+")");
        try {
            Thread.sleep(10);
        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jList1.updateUI();
        UpdatePanel();
        return;
    }
    void addPoint(ArrayList<Point> p){
        for (int i=0 ;i<p.size();i++)
        {
            if(Var.point_status[p.get(i).x][p.get(i).y] == true)continue;
            Var.point_status[p.get(i).x][p.get(i).y] = true;
            Var.Point_in_Canvas.add(p.get(i)); 
            Var.Point_DLM.addElement("("+p.get(i).x+","+p.get(i).y+")");
        }
        try {
            Thread.sleep(100);
        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jList1.updateUI();
        UpdatePanel();
        return;
    }
    void removePoint(Point p){
        if(Var.point_status[p.x][p.y] == false)return;
        Var.point_status[p.x][p.y] = false;
        Var.Point_in_Canvas.remove(p);
        Var.Point_DLM.removeElement("("+p.x+","+p.y+")");
        jList1.updateUI();
        UpdatePanel();
    }  
    void removePoint(String n){
        int tmp = Var.Point_DLM.indexOf(n);
        
        if(tmp==-1)return;
        Var.Point_in_Canvas.remove(tmp);
        Var.Point_DLM.removeElement(n);
        jList1.updateUI();
        UpdatePanel();
    }
    void addLine(Var.Line l){
        if(l.p1.x > l.p2.x | (l.p1.x == l.p2.x & l.p1.y > l.p2.y)){
            Var.Line_in_Canvas.add(new Var.Line(l.p2,l.p1));
        }else{
            Var.Line_in_Canvas.add(l);
        }
        UpdatePanel();
    }
    void addLine(ArrayList<Var.Line> l){
        for(int i=0;i<l.size();i++)
        {
            if(l.get(i).p1.x > l.get(i).p2.x | (l.get(i).p1.x == l.get(i).p2.x & l.get(i).p1.y > l.get(i).p2.y)){
                Var.Line_in_Canvas.add(new Var.Line(l.get(i).p2,l.get(i).p1));
            }else{
                Var.Line_in_Canvas.add(l.get(i));
            }
        }        
        UpdatePanel();
    }
    void removeLine(Var.Line l){
        Var.Line_in_Canvas.remove(l);        
        UpdatePanel();
    }
    void addPolygon(Polygon p){
        Var.Polygon_in_Canvas.add(p);
        UpdatePanel();
    }
    void removePolygon(Polygon p){
        Var.Polygon_in_Canvas.remove(p);
        UpdatePanel();
    }
    //Draw
    void UpdatePanel(){
        RepainPanel();    
        DrawPoint(Var.Point_in_Canvas,Var.Point_Color);
        
        DrawPoint(Var.Cross_Point_in_Canvas,Color.magenta);
        DrawLine(Var.Line_in_Canvas,Var.VD_Line_Color1);    
        DrawLine(Var.Line_in_Canvas2,Var.VD_Line_Color2); 
        DrawLine(Var.Convex_Hull_Line_in_Canvas,Var.CH_Line_Color1);
        DrawLine(Var.Convex_Hull_Line_in_Canvas2,Var.CH_Line_Color2);
        DrawLine(Var.Hyper_Plane_in_Canvas,Var.HP_Line_Color1);
        DrawLine(Var.Hyper_Plane_in_Canvas2,Var.HP_Line_Color2);
        DrawLine(Var.Dive_Line_in_Canvas,Color.orange);
        
    }
    void RepainPanel(){
        g2d.setColor(jPanel1.getBackground());
        g2d.fillRect(0, 0, Var.Panel_Size_X, Var.Panel_Size_Y);         
    }
    void ClearPanel(){
        RepainPanel();
        Var.clearAllVar();        
        jList1.updateUI();
        return;
    }    
    void DrawPoint(Point p,Color c){
        g2d.setColor(c);  
        g2d.fillOval(p.x-(int)(Var.Point_Size/2), p.y-(int)(Var.Point_Size/2),Var.Point_Size, Var.Point_Size);   
    }    
    void DrawPoint(ArrayList<Point> p,Color c){
        if(p.size()==0) return;
        g2d.setColor(c); 
        for(int i=0;i<p.size();i++)
        {  
            g2d.fillOval(p.get(i).x-(int)(Var.Point_Size/2), p.get(i).y-(int)(Var.Point_Size/2),Var.Point_Size, Var.Point_Size);   
        }       
    }
    void DrawLine(Var.Line l,Color c){
        g2d.setColor(c); 
        g2d.drawLine(l.p1.x, l.p1.y, l.p2.x, l.p2.y);        
    }
    void DrawLine(ArrayList<Var.Line> l,Color c){
        if(l.size()==0) return;
        g2d.setColor(c);
        for(int i=0;i<l.size();i++)
        {
            g2d.drawLine(l.get(i).p1.x, l.get(i).p1.y, l.get(i).p2.x, l.get(i).p2.y);
        }
    }
    void DrawPolygon(ArrayList<Polygon> p){
        if(p.size()==0) return;
        g2d.setColor(getRandomColor());            
        for(int i=0;i<p.size();i++){
            g2d.fillPolygon(p.get(i).xpoints, p.get(i).ypoints, p.get(i).npoints);            
        }
    }
    void DrawRandomPoint(int number_point){                                     
        int tmp = number_point;
        int x,y;
        ArrayList<Point> p = new ArrayList<Point>();
        while(tmp>0){          
            x= (int)(Math.random()*1000%Var.Panel_Size_X);
            y= (int)(Math.random()*1000%Var.Panel_Size_Y);
            p.add(new Point(x,y));
            if(Var.Point_in_Canvas.contains(p)==false){                                
                                               
                tmp=tmp-1;
            }                     
        } 
        addPoint(p); 
        
                     
        return;
    }
    
}
